package SMTravelSimulation;
import simulationModelling.ScheduledAction;

/*
 * Scheduled action: StaffCahnge
 */

class StaffChange extends ScheduledAction {
	
	SMTravel model;  // reference to model object
	public StaffChange(SMTravel model){
		this.model = model;
	}

	private double[] staffChangeTimeSeq = {0,3600,7200,10800,14400,28800,32400,36000,39600,43200,-1};
	private int sctIx = 0;
	public double timeSequence() { 
		double nxtTime = staffChangeTimeSeq[sctIx];
		sctIx++;
		return(nxtTime); 
	}

	protected void actionEvent()
	{
	    int x = 1;

// ON work
	    if(model.getClock() == staffChangeTimeSeq[0]) {
			model.rgOperator[Constants.REGULAR].uNumOperators = model.rgOperator[Constants.REGULAR].schedule[0];
			model.rgOperator[Constants.SILVER].uNumOperators = model.rgOperator[Constants.SILVER].schedule[0];
			model.rgOperator[Constants.GOLD].uNumOperators = model.rgOperator[Constants.GOLD].schedule[0];
		}
	    else if(model.getClock() == staffChangeTimeSeq[1]) {
	    	model.rgOperator[Constants.REGULAR].uNumOperators += model.rgOperator[Constants.REGULAR].schedule[1];
			model.rgOperator[Constants.SILVER].uNumOperators += model.rgOperator[Constants.SILVER].schedule[1];
			model.rgOperator[Constants.GOLD].uNumOperators += model.rgOperator[Constants.GOLD].schedule[1];
	    }
	    else if(model.getClock() == staffChangeTimeSeq[2]) {
	    	model.rgOperator[Constants.REGULAR].uNumOperators += model.rgOperator[Constants.REGULAR].schedule[2];
			model.rgOperator[Constants.SILVER].uNumOperators += model.rgOperator[Constants.SILVER].schedule[2];
			model.rgOperator[Constants.GOLD].uNumOperators += model.rgOperator[Constants.GOLD].schedule[2];
	    }
	    else if(model.getClock() == staffChangeTimeSeq[3]) {
	    	model.rgOperator[Constants.REGULAR].uNumOperators += model.rgOperator[Constants.REGULAR].schedule[3];
			model.rgOperator[Constants.SILVER].uNumOperators += model.rgOperator[Constants.SILVER].schedule[3];
			model.rgOperator[Constants.GOLD].uNumOperators += model.rgOperator[Constants.GOLD].schedule[3];
	    }
	    else if(model.getClock() == staffChangeTimeSeq[4]) {
	    	model.rgOperator[Constants.REGULAR].uNumOperators += model.rgOperator[Constants.REGULAR].schedule[4];
			model.rgOperator[Constants.SILVER].uNumOperators += model.rgOperator[Constants.SILVER].schedule[4];
			model.rgOperator[Constants.GOLD].uNumOperators += model.rgOperator[Constants.GOLD].schedule[4];
	    }
	    
// OFF work
	    
	    else if(model.getClock() == staffChangeTimeSeq[5]) {
	    	model.rgOperator[Constants.REGULAR].uNumOperators -= model.rgOperator[Constants.REGULAR].schedule[0];
			model.rgOperator[Constants.SILVER].uNumOperators -= model.rgOperator[Constants.SILVER].schedule[0];
			model.rgOperator[Constants.GOLD].uNumOperators -= model.rgOperator[Constants.GOLD].schedule[0];
	    }
	    else if(model.getClock() == staffChangeTimeSeq[6]) {
	    	model.rgOperator[Constants.REGULAR].uNumOperators -= model.rgOperator[Constants.REGULAR].schedule[1];
			model.rgOperator[Constants.SILVER].uNumOperators -= model.rgOperator[Constants.SILVER].schedule[1];
			model.rgOperator[Constants.GOLD].uNumOperators -= model.rgOperator[Constants.GOLD].schedule[1];
	    }
	    else if(model.getClock() == staffChangeTimeSeq[7]) {
	    	model.rgOperator[Constants.REGULAR].uNumOperators -= model.rgOperator[Constants.REGULAR].schedule[2];
			model.rgOperator[Constants.SILVER].uNumOperators -= model.rgOperator[Constants.SILVER].schedule[2];
			model.rgOperator[Constants.GOLD].uNumOperators -= model.rgOperator[Constants.GOLD].schedule[2];
	    }
	    else if(model.getClock() == staffChangeTimeSeq[8]) {
	    	model.rgOperator[Constants.REGULAR].uNumOperators -= model.rgOperator[Constants.REGULAR].schedule[3];
			model.rgOperator[Constants.SILVER].uNumOperators -= model.rgOperator[Constants.SILVER].schedule[3];
			model.rgOperator[Constants.GOLD].uNumOperators -= model.rgOperator[Constants.GOLD].schedule[3];
	    }
	    else if(model.getClock() == staffChangeTimeSeq[9]) {
	    	model.rgOperator[Constants.REGULAR].uNumOperators -= model.rgOperator[Constants.REGULAR].schedule[4];
			model.rgOperator[Constants.SILVER].uNumOperators -= model.rgOperator[Constants.SILVER].schedule[4];
			model.rgOperator[Constants.GOLD].uNumOperators -= model.rgOperator[Constants.GOLD].schedule[4];
	    }
		
	    else System.out.println("Invalid time to schedule employees:"+model.getClock());
	}

}
